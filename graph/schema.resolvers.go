package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/mkdirjava/graphql-todos/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	newTodo := &model.Todo{
		ID:   uuid.NewString(),
		Text: input.Text,
	}
	userIdInput := *input.UserID
	if len(userIdInput) > 0 {
		if user, userErr := r.ModelCache.FindUserById(userIdInput); userErr != nil {
			return nil, userErr
		} else {
			newTodo.User = user
		}
	}

	r.ModelCache.AddToCache(newTodo)
	return newTodo, nil
}

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, userName string) (*model.User, error) {
	return r.ModelCache.CreateUser(userName), nil
}

// AssignTodo is the resolver for the assignTodo field.
func (r *mutationResolver) AssignTodo(ctx context.Context, todoID string, userID string) (*model.Todo, error) {
	if todo, todoErr := r.ModelCache.AssignTodo(todoID, userID); todoErr != nil {
		return nil, todoErr
	} else {
		return todo, nil
	}
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	return r.ModelCache.GetCache(), nil
}

// GetAllUsers is the resolver for the getAllUsers field.
func (r *queryResolver) GetAllUsers(ctx context.Context) ([]*model.User, error) {
	return r.ModelCache.GetAllUsers(), nil
}

// CurrentTodos is the resolver for the currentTodos field.
func (r *subscriptionResolver) CurrentTodos(ctx context.Context) (<-chan []*model.Todo, error) {
	ch := r.ModelCache.CreateSubscriber()

	go func() {
		defer close(ch)
		<-ctx.Done() // This runs when context gets cancelled. Subscription closes.
		fmt.Println("Subscription Closed")
		// Handle deregistration of the channel here. `close(ch)`
	}()

	return ch, nil
}

// User is the resolver for the user field.
func (r *todoResolver) User(ctx context.Context, obj *model.Todo) (*model.User, error) {
	if obj.User == nil {
		return nil, nil
	}
	if foundCacheUser := r.ModelCache.FindUser(obj); foundCacheUser == nil {
		return nil, fmt.Errorf("cannot find user with a todo Id of %v", obj.ID)
	} else {
		return foundCacheUser, nil
	}
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

// Todo returns TodoResolver implementation.
func (r *Resolver) Todo() TodoResolver { return &todoResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
type todoResolver struct{ *Resolver }
