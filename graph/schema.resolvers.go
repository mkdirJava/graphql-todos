package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.47

import (
	"context"
	"fmt"

	"github.com/mkdirjava/graphql-todos/graph/model"
)

// CreateTodo is the resolver for the createTodo field.
func (r *mutationResolver) CreateTodo(ctx context.Context, input model.NewTodo) (*model.Todo, error) {
	return &todo, nil
}

// Todos is the resolver for the todos field.
func (r *queryResolver) Todos(ctx context.Context) ([]*model.Todo, error) {
	returningItems := []*model.Todo{&todo}
	return returningItems, nil
}

// CurrentTodos is the resolver for the currentTodos field.
func (r *subscriptionResolver) CurrentTodos(ctx context.Context) (<-chan []*model.Todo, error) {
	returningItems := []*model.Todo{&todo}
	ch := make(chan []*model.Todo)

	go func() {
		defer close(ch)
		select {
		case <-ctx.Done(): // This runs when context gets cancelled. Subscription closes.
			fmt.Println("Subscription Closed")
			// Handle deregistration of the channel here. `close(ch)`
			return // Remember to return to end the routine.

		case ch <- returningItems: // This is the actual send.
			// Our message went through, do nothing
		}
	}()

	return ch, nil
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }

// !!! WARNING !!!
// The code below was going to be deleted when updating resolvers. It has been copied here so you have
// one last chance to move it out of harms way if you want. There are two reasons this happens:
//   - When renaming or deleting a resolver the old code will be put in here. You can safely delete
//     it when you're done.
//   - You have helper methods in this file. Move them out to keep these resolver files clean.
var todo = model.Todo{
	ID:   "1",
	Text: "Hi there world",
	Done: true,
	User: &model.User{
		ID:   "1",
		Name: "bob",
	},
}
